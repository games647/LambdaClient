plugins {
    id 'java'
    id 'de.undercouch.download' version '3.1.1'
}

group 'com.github.games647'
version '1.0-SNAPSHOT'

//downloads a new version of the wrapper with the /gradle wrapper command
task wrapper(type: Wrapper) {
  gradleVersion = '3.1'
  distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

sourceCompatibility = 1.8

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java", ".mcp/src/minecraft"]
        }
    }
}

//dependencies
repositories {
    mavenCentral()
}

dependencies {
    compile fileTree(dir: '.mcp/jars/libraries/', include: '**/*.jar')
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

//tasks
import de.undercouch.gradle.tasks.download.Download
task downloadMcp(type: Download) {
    def version = 931

    src 'http://www.modcoderpack.com/website/sites/default/files/releases/mcp' + version + '.zip'
    dest 'mcp' + version + '.zip'
}

task unzipMcp(type: Copy) {
    def zipFile = file('mcp.zip')
    def outputDir = file(".mcp")

    from zipTree(zipFile)
    into outputDir
}

task decompile(type: Exec) {
    def workingDir = "$projectDir/.mcp"
    if (System.getProperty('os.name').toLowerCase().contains('windows')) {
        commandLine 'cmd', '/c', 'decompile.bat'
    } else {
        commandLine 'sh', '-c', 'decompile.sh'
    }
}

/**
 * Branches and their meaning:
 *
 * Master => normal Minecraft code without changes
 * Working => Code including modifications
 */
task updatePatch << {
    def mcpDir = "$projectDir/.mcp/src/minecraft"

    //reset only the git history to the first commit in order to output only patch file
    exec {
        workingDir mcpDir
        commandLine 'cmd', '/c', 'git reset --soft First'
    }

    //create a merge commit
    exec {
        workingDir mcpDir
        commandLine 'cmd', '/c', 'git merge --squash master'
    }

    //commit those changes with an anonymous user
    exec {
        workingDir mcpDir
        commandLine 'cmd', '/c', 'git commit --author="Auhtor <author@example.com>" -a -m "Minecraft patch"'
    }

    //output the difference to our main project folder
    exec {
        workingDir mcpDir
        commandLine 'cmd', '/c', 'git format-patch master --ignore-space-change -o ../../..'
    }
}

task applyPatch << {
    def mcpDir = "$projectDir/.mcp/src/minecraft"

    //setup the custom git history for the mc code
    if (!new File(mcpDir, ".git").exists()) {
        //Make the first commit
        exec {
            workingDir mcpDir
            commandLine 'cmd', '/c', 'git init'
        }

        exec {
            workingDir mcpDir
            commandLine 'cmd', '/c', 'git add .'
        }

        exec {
            workingDir mcpDir
            commandLine 'cmd', '/c', 'git commit -m "First"'
        }

        //save this point in order to restore it to make a complete diff every time
        exec {
            workingDir mcpDir
            commandLine 'cmd', '/c', 'git tag -a -m "-" First'
        }

        //make a working branch where we can include our changes
        exec {
            workingDir mcpDir
            commandLine 'cmd', '/c', 'git checkout -b working'
        }
    }

    //apply the patches
    exec {
        workingDir mcpDir
        commandLine 'cmd', '/c', 'git apply --ignore-space-change --ignore-whitespace ../../../0001-Minecraft-patch.patch'
    }
}

task run(type: Exec) {
    def workingDir = "$projectDir/.mcp"
    if (System.getProperty('os.name').toLowerCase().contains('windows')) {
        commandLine 'cmd', '/c', 'startclient.bat'
    } else {
        commandLine 'sh', '-c', 'startclient.sh'
    }
}

task install(type: Copy) {
    def fromFile = file('.mcp/jars/versions/1.10')
    def outputDir = new File(getMinecraftFolder(), "versions/" + project.name + '-' + version);

    from fromFile
    into outputDir
    rename {
        String fileName -> fileName.replace("1.10", project.name + '-' + version)
    }

    filter{
        it.replace('"id": "1.10"', '"id": "' + project.name + '-' + version +'"')
    }
}

def File getMinecraftFolder() {
    String userHome = System.getProperty("user.home", ".");
    File result;

    if (System.getProperty('os.name').toLowerCase().contains('windows')) {
        String applicationData = System.getenv("APPDATA")
        String folder = applicationData != null ? applicationData : userHome
        result = new File(folder, ".minecraft/")
    } else if (System.getProperty('os.name').toLowerCase().contains('macos')) {
        result = new File(userHome, "Library/Application Support/minecraft")
    } else if (System.getProperty('os.name').toLowerCase().contains('linux')
            || System.getProperty('os.name').toLowerCase().contains('solaris')) {
        result = new File(userHome, ".minecraft/")
    } else {
        result = new File(userHome, "minecraft/");
    }

    return result
}